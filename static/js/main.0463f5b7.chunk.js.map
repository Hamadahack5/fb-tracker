{"version":3,"sources":["components/MetricCard.js","App.js","serviceWorker.js","index.js"],"names":["MetricCard","this","props","type","react_default","a","createElement","Grid","Column","textAlign","engagement","toLocaleString","Card","Content","header","pageName","Meta","created_time","name","message","Container","columns","Row","impressions","reach","extra","href","link","target","rel","Button","basic","color","content","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addToList","e","preventDefault","getMetrics","state","currentValue","getMetricsRefresh","element","pageData","postData","setState","loading","url","postId","facebookData","forEach","pageId","value","concat","window","FB","api","access_token","response","text","Date","insights","data","values","valueList","links","push","saveToDB","populateList","currentPage","includes","slice","split","pop","handleInputChange","handleDropdownChange","_ref","accessToken","oldLinks","items","appUserID","loadFacebook","bind","assertThisInitialized","clearDB","forceRefresh","backupRestore","firebaseUI","signOut","_this2","firebase","initializeApp","apiKey","authDomain","projectId","auth","onAuthStateChanged","user","loginFacebook","uid","_this3","ui","firebaseui","AuthUI","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","console","log","credential","signInFlow","signInOptions","provider","FacebookAuthProvider","PROVIDER_ID","scopes","start","d","s","id","js","fjs","getElementsByTagName","getElementById","src","parentNode","insertBefore","document","fbAsyncInit","init","appId","autoLogAppEvents","xfbml","version","_this4","getLoginStatus","status","getFromDB","populateSelect","db","firestore","confirm","collection","doc","delete","then","alert","catch","error","_this5","get","exists","set","Loader","active","disabled","_this6","Swal","fire","title","input","inputValue","JSON","stringify","inputPlaceholder","showCancelButton","confirmButtonText","result","undefined","parse","_this7","pages","sort","b","localeCompare","MetricCard_MetricCard","key","className","centered","padded","divided","Header","as","icon","Icon","Form","onSubmit","Input","defaultValue","onChange","fluid","required","placeholder","Select","options","fitted","negative","onClick","positive","loader","Group","itemsPerRow","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0463f5b7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Card, Button, Grid, Container} from 'semantic-ui-react';\n\nexport default class MetricCard extends Component {\n  engagement() {\n    if (this.props.type === 'video') {\n      return (\n        <Grid.Column textAlign=\"center\">\n          Video Views<p>{this.props.engagement.toLocaleString()}</p>\n        </Grid.Column>\n      );\n    } else {\n      return (\n        <Grid.Column textAlign=\"center\">\n          Post Clicks<p>{this.props.engagement.toLocaleString()}</p>\n        </Grid.Column>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Content header={this.props.header}>\n          {this.props.pageName}\n          <Card.Meta>{this.props.created_time}</Card.Meta>\n        </Card.Content>\n        <Card.Content>\n          <p>\n            <strong>{this.props.name}</strong>\n          </p>\n          <p>{this.props.message}</p>\n        </Card.Content>\n        <Card.Content>\n          <Container>\n            <Grid columns={3}>\n              <Grid.Row>\n                <Grid.Column textAlign=\"center\">\n                  Impressions<p>{this.props.impressions.toLocaleString()}</p>\n                </Grid.Column>\n                <Grid.Column textAlign=\"center\">\n                  Reach<p>{this.props.reach.toLocaleString()}</p>\n                </Grid.Column>\n                {this.engagement()}\n              </Grid.Row>\n            </Grid>\n          </Container>\n        </Card.Content>\n        <Card.Content extra>\n          <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n            <Button basic color=\"blue\" content=\"View\" />\n          </a>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport firebase from 'firebase';\nimport * as firebaseui from 'firebaseui';\nimport {\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Input,\n  Card,\n  Form,\n  Button,\n  Select,\n  Loader\n} from 'semantic-ui-react';\nimport MetricCard from './components/MetricCard';\nimport Swal from 'sweetalert2';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accessToken: '',\n      currentValue: '',\n      currentPage: '',\n      links: [],\n      oldLinks: [],\n      facebookData: [],\n      items: [],\n      loading: false,\n      appUserID: ''\n    };\n    this.loadFacebook = this.loadFacebook.bind(this);\n    this.clearDB = this.clearDB.bind(this);\n    this.addToList = this.addToList.bind(this);\n    this.forceRefresh = this.forceRefresh.bind(this);\n    this.backupRestore = this.backupRestore.bind(this);\n    this.firebaseUI = this.firebaseUI.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadFacebook();\n    var config = {\n      apiKey: 'AIzaSyCi8s6wYR8LT2hTLwOgEAmduO_3qZE_ohE',\n      authDomain: 'facebooktest-f856a.firebaseapp.com',\n      projectId: 'facebooktest-f856a'\n    };\n    firebase.initializeApp(config);\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.loginFacebook();\n        this.setState({appUserID: user.uid});\n        this.setState({loading: true});\n      } else {\n        this.firebaseUI();\n      }\n    });\n  }\n\n  firebaseUI() {\n    var ui = new firebaseui.auth.AuthUI(firebase.auth());\n    var uiConfig = {\n      callbacks: {\n        signInSuccessWithAuthResult: (authResult, redirectUrl) => {\n          console.log(authResult);\n          this.setState({accessToken: authResult.credential.accessToken});\n          this.loginFacebook();\n          return false;\n        }\n      },\n      signInFlow: 'popup',\n      signInOptions: [\n        {\n          provider: firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n          scopes: ['manage_pages', 'read_insights']\n        }\n      ]\n    };\n    ui.start('#firebaseui-auth-container', uiConfig);\n  }\n\n  signOut() {\n    firebase.auth().signOut();\n  }\n\n  loadFacebook() {\n    ((d, s, id) => {\n      var js,\n        fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {\n        return;\n      }\n      js = d.createElement(s);\n      js.id = id;\n      js.src = 'https://connect.facebook.net/en_US/sdk.js';\n      fjs.parentNode.insertBefore(js, fjs);\n    })(document, 'script', 'facebook-jssdk');\n\n    window.fbAsyncInit = () => {\n      window.FB.init({\n        appId: '1497929310342175',\n        autoLogAppEvents: true,\n        xfbml: true,\n        version: 'v3.2',\n        state: true\n      });\n    };\n  }\n\n  loginFacebook() {\n    window.FB.getLoginStatus((response) => {\n      if (response.status === 'connected') {\n        window.FB.api(\n          '/me/accounts?fields=id,name,access_token',\n          (response) => {\n            this.setState({facebookData: response.data});\n            this.getFromDB();\n            this.populateSelect();\n          }\n        );\n      } else {\n        console.log('Login Failed!');\n      }\n    });\n  }\n\n  clearDB() {\n    const db = firebase.firestore();\n    if (window.confirm('Clear all history?')) {\n      db.collection('records')\n        .doc(this.state.appUserID)\n        .delete()\n        .then(function() {\n          alert('History cleared!');\n        })\n        .catch(function(error) {\n          console.error('Error removing document: ', error);\n        });\n      this.setState({links: []});\n    }\n  }\n\n  getFromDB() {\n    const db = firebase.firestore();\n    var docRef = db.collection('records').doc(this.state.appUserID);\n    docRef\n      .get()\n      .then((doc) => {\n        if (doc.exists) {\n          this.setState({links: doc.data().links});\n          this.setState({loading: false});\n        } else {\n          console.log('No such document!');\n          this.setState({loading: false});\n        }\n      })\n      .catch((error) => {\n        console.log('Error getting document', error);\n      });\n  }\n\n  saveToDB() {\n    const db = firebase.firestore();\n    db.collection('records')\n      .doc(this.state.appUserID)\n      .set({\n        links: this.state.links\n      });\n  }\n\n  loader() {\n    if (this.state.loading) {\n      return <Loader active />;\n    } else {\n      return <Loader disabled />;\n    }\n  }\n\n  backupRestore() {\n    Swal.fire({\n      title: 'Copy the text contents and save to a file for backup.',\n      input: 'textarea',\n      inputValue: JSON.stringify(this.state.links),\n      inputPlaceholder: 'Type your message here...',\n      showCancelButton: true,\n      confirmButtonText: 'Restore'\n    })\n      .then((result) => {\n        if (result.value !== undefined) {\n          this.setState({links: JSON.parse(result.value)});\n          this.saveToDB();\n        }\n      })\n      .catch();\n  }\n\n  forceRefresh() {\n    this.setState({oldLinks: this.state.links, links: []});\n    this.state.links.forEach((element) => {\n      this.getMetricsRefresh(element);\n    });\n  }\n\n  populateSelect() {\n    let pages = [];\n    this.state.facebookData.forEach((element) => {\n      pages.push({\n        value: element.id,\n        text: element.name,\n        access_token: element.access_token\n      });\n    });\n    pages.sort((a, b) => {\n      return a.text.localeCompare(b.text);\n    });\n    this.setState({facebookData: pages});\n  }\n\n  populateList() {\n    let items = [];\n    this.state.links.forEach((element) => {\n      items.push(\n        <MetricCard\n          key={element.postId}\n          type={element.type}\n          pageName={element.pageName}\n          impressions={element.impressions}\n          reach={element.reach}\n          engagement={element.engagement}\n          link={element.link}\n          name={element.name}\n          message={element.message}\n          created_time={element.created_time}\n        />\n      );\n    });\n    return items;\n  }\n\n  addToList = (e) => {\n    e.preventDefault();\n    this.getMetrics(this.state.currentValue);\n  };\n\n  getMetricsRefresh = (element) => {\n    this.setState({loading: true});\n    let pageData;\n    let postData;\n    let type = element.type;\n    let postId = element.postId;\n    let url;\n    this.state.facebookData.forEach((e) => {\n      if (element.pageId === e.value) {\n        pageData = e;\n      }\n    });\n    if (type === 'video') {\n      url = `/${\n        pageData.value\n      }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_video_views),name,message,created_time`;\n    } else {\n      url = `/${\n        pageData.value\n      }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_clicks),name,message,created_time`;\n    }\n    window.FB.api(\n      url,\n      {\n        access_token: pageData.access_token\n      },\n      (response) => {\n        if (type === 'video') {\n          postData = {\n            link: element.link,\n            postId: postId,\n            pageId: pageData.value,\n            pageName: pageData.text,\n            type: type,\n            name: response.name,\n            message: response.message,\n            created_time: new Date(response.created_time).toLocaleString(\n              'en-SG'\n            ),\n            impressions: response.insights.data[2].values[0].value,\n            reach: response.insights.data[3].values[0].value,\n            engagement: response.insights.data[1].values[0].value\n          };\n        } else {\n          postData = {\n            link: element.link,\n            postId: postId,\n            pageId: pageData.value,\n            pageName: pageData.text,\n            type: type,\n            name: response.name,\n            message: response.message,\n            created_time: new Date(response.created_time).toLocaleString(\n              'en-SG'\n            ),\n            impressions: response.insights.data[0].values[0].value,\n            reach: response.insights.data[1].values[0].value,\n            engagement: response.insights.data[2].values[0].value\n          };\n        }\n        let valueList = this.state.links;\n        valueList.push(postData);\n        this.setState({links: valueList});\n        this.saveToDB();\n        this.populateList();\n        this.setState({loading: false});\n      }\n    );\n  };\n\n  getMetrics = (link) => {\n    let pageData;\n    let postData;\n    let type;\n    let postId;\n    let url;\n    this.state.facebookData.forEach((element) => {\n      if (this.state.currentPage === element.value) {\n        pageData = element;\n      }\n    });\n    if (link.includes('videos')) {\n      type = 'video';\n      postId = link\n        .slice(0, -1)\n        .split('/')\n        .pop();\n      url = `/${\n        pageData.value\n      }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_video_views),name,message,created_time`;\n    } else {\n      type = 'posts';\n      postId = link.split('/').pop();\n      url = `/${\n        pageData.value\n      }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_clicks),name,message,created_time`;\n    }\n    window.FB.api(\n      url,\n      {\n        access_token: pageData.access_token\n      },\n      (response) => {\n        if (type === 'video') {\n          postData = {\n            link: link,\n            postId: postId,\n            pageId: pageData.value,\n            pageName: pageData.text,\n            type: type,\n            name: response.name,\n            message: response.message,\n            created_time: new Date(response.created_time).toLocaleString(\n              'en-SG'\n            ),\n            impressions: response.insights.data[2].values[0].value,\n            reach: response.insights.data[3].values[0].value,\n            engagement: response.insights.data[1].values[0].value\n          };\n        } else {\n          postData = {\n            link: link,\n            postId: postId,\n            pageId: pageData.value,\n            pageName: pageData.text,\n            type: type,\n            name: response.name,\n            message: response.message,\n            created_time: new Date(response.created_time).toLocaleString(\n              'en-SG'\n            ),\n            impressions: response.insights.data[0].values[0].value,\n            reach: response.insights.data[1].values[0].value,\n            engagement: response.insights.data[2].values[0].value\n          };\n        }\n\n        let valueList = this.state.links;\n        valueList.push(postData);\n        this.setState({links: valueList});\n        this.saveToDB();\n        this.populateList();\n      }\n    );\n  };\n\n  handleInputChange = (e) => {\n    this.setState({currentValue: e.target.value.split('?')[0]});\n  };\n\n  handleDropdownChange = (e, {value}) => {\n    this.setState({\n      currentPage: value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Grid centered padded columns={1} divided>\n            <Grid.Row>\n              <Grid.Column>\n                <Header as=\"h1\" icon textAlign=\"center\">\n                  <Icon name=\"facebook\" />\n                  <Header.Content>Facebook Insights Tracker</Header.Content>\n                </Header>\n                <div id=\"firebaseui-auth-container\" />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form onSubmit={this.addToList}>\n                  <Input\n                    defaultValue={this.state.currentValue}\n                    onChange={this.handleInputChange}\n                    fluid\n                    required\n                    placeholder=\"Link\"\n                    type=\"url\"\n                  >\n                    <input />\n                    <Select\n                      placeholder=\"Page\"\n                      options={this.state.facebookData}\n                      onChange={this.handleDropdownChange}\n                    />\n                    <Button type=\"submit\">\n                      <Icon fitted name=\"add\" />\n                    </Button>\n                  </Input>\n                </Form>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Button\n                  negative\n                  content=\"Clear History\"\n                  onClick={this.clearDB}\n                />\n                <Button\n                  positive\n                  content=\"Force Refresh\"\n                  onClick={this.forceRefresh}\n                />\n                <Button content=\"Sign Out\" onClick={this.signOut} />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                {this.loader()}\n                <Card.Group centered itemsPerRow=\"3\">\n                  {this.populateList()}\n                </Card.Group>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'firebaseui/dist/firebaseui.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}