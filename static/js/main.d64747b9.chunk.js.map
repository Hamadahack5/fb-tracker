{"version":3,"sources":["components/MetricCard.js","App.js","serviceWorker.js","index.js"],"names":["MetricCard","react_default","a","createElement","Card","Content","header","this","props","pageName","Meta","created_time","name","message","Container","Grid","columns","Row","Column","textAlign","impressions","toLocaleString","reach","extra","href","link","target","rel","Button","basic","color","content","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addToList","e","preventDefault","getMetrics","state","currentValue","pageData","postData","postId","split","pop","facebookData","forEach","element","currentPage","value","window","FB","api","concat","access_token","response","pageId","text","Date","insights","data","values","engagement","valueList","links","push","setState","saveToLocalStorage","populateList","handleInputChange","handleDropdownChange","_ref","items","loadFacebook","bind","assertThisInitialized","clearLocalStorage","getFromLocalStorage","_this2","d","s","id","js","fjs","getElementsByTagName","getElementById","src","parentNode","insertBefore","document","fbAsyncInit","init","appId","autoLogAppEvents","xfbml","version","loginFacebook","_this3","getLoginStatus","status","populateSelect","console","log","confirm","localStorage","clear","hasOwnProperty","getItem","JSON","parse","setItem","stringify","pages","sort","b","localeCompare","MetricCard_MetricCard","className","centered","padded","divided","Header","as","icon","Icon","style","display","data-size","data-button-type","data-auto-logout-link","data-use-continue-as","data-scope","Form","onSubmit","Input","defaultValue","onChange","fluid","required","placeholder","type","Select","options","fitted","onClick","Group","itemsPerRow","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d64747b9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Card, Button, Grid, Container} from 'semantic-ui-react';\n\nexport default class MetricCard extends Component {\n  render() {\n    return (\n      <Card>\n        <Card.Content header={this.props.header}>\n          {this.props.pageName}\n          <Card.Meta>{this.props.created_time}</Card.Meta>\n        </Card.Content>\n        <Card.Content>\n          <p>\n            <strong>{this.props.name}</strong>\n          </p>\n          <p>{this.props.message}</p>\n        </Card.Content>\n        <Card.Content>\n          <Container>\n            <Grid columns={2}>\n              <Grid.Row>\n                <Grid.Column textAlign=\"center\">\n                  Impressions<p>{this.props.impressions.toLocaleString()}</p>\n                </Grid.Column>\n                <Grid.Column textAlign=\"center\">\n                  Reach<p>{this.props.reach.toLocaleString()}</p>\n                </Grid.Column>\n                {/* <Grid.Column textAlign=\"center\">\n                  Engagement<p>{this.props.engagement.toLocaleString()}</p>\n                </Grid.Column> */}\n              </Grid.Row>\n            </Grid>\n          </Container>\n        </Card.Content>\n        <Card.Content extra>\n          <a href={this.props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n            <Button basic color=\"blue\" content=\"View\" />\n          </a>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Input,\n  Card,\n  Form,\n  Button,\n  Select\n} from 'semantic-ui-react';\nimport MetricCard from './components/MetricCard';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentValue: '',\n      currentPage: '',\n      links: [],\n      facebookData: [],\n      items: []\n    };\n    this.loadFacebook = this.loadFacebook.bind(this);\n    this.clearLocalStorage = this.clearLocalStorage.bind(this);\n    this.addToList = this.addToList.bind(this);\n  }\n\n  componentDidMount() {\n    this.getFromLocalStorage();\n    this.loadFacebook();\n  }\n\n  loadFacebook() {\n    ((d, s, id) => {\n      var js,\n        fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {\n        return;\n      }\n      js = d.createElement(s);\n      js.id = id;\n      js.src = 'https://connect.facebook.net/en_US/sdk.js';\n      fjs.parentNode.insertBefore(js, fjs);\n    })(document, 'script', 'facebook-jssdk');\n\n    window.fbAsyncInit = () => {\n      window.FB.init({\n        appId: '1497929310342175',\n        autoLogAppEvents: true,\n        xfbml: true,\n        version: 'v3.2',\n        state: true\n      });\n      this.loginFacebook();\n    };\n  }\n\n  loginFacebook() {\n    window.FB.getLoginStatus((response) => {\n      if (response.status === 'connected') {\n        window.FB.api('/me/accounts?fields=name,access_token', (response) => {\n          this.setState({facebookData: response.data});\n          this.populateSelect();\n        });\n      } else {\n        console.log('Login Failed!');\n      }\n    });\n  }\n\n  clearLocalStorage() {\n    if (window.confirm('Clear all history?')) {\n      localStorage.clear();\n      this.setState({links: []});\n    }\n  }\n\n  getFromLocalStorage() {\n    if (localStorage.hasOwnProperty('links')) {\n      let valueList = localStorage.getItem('links');\n      this.setState({links: JSON.parse(valueList)});\n    } else {\n      this.setState({links: []});\n    }\n  }\n\n  saveToLocalStorage() {\n    localStorage.setItem('links', JSON.stringify(this.state.links));\n  }\n\n  populateSelect() {\n    let pages = [];\n    this.state.facebookData.forEach((element) => {\n      pages.push({\n        value: element.id,\n        text: element.name,\n        access_token: element.access_token\n      });\n    });\n    pages.sort((a, b) => {\n      return a.text.localeCompare(b.text);\n    });\n    this.setState({facebookData: pages});\n  }\n\n  populateList() {\n    let items = [];\n    this.state.links.forEach((element) => {\n      items.push(\n        <MetricCard\n          pageName={element.pageName}\n          impressions={element.impressions}\n          reach={element.reach}\n          engagement={element.engagement}\n          link={element.link}\n          name={element.name}\n          message={element.message}\n          created_time={element.created_time}\n        />\n      );\n    });\n    return items;\n  }\n\n  addToList = (e) => {\n    e.preventDefault();\n    this.getMetrics(this.state.currentValue);\n  };\n\n  getMetrics = (link) => {\n    // https://www.facebook.com/TheSmartLocal/posts/2125472094207230\n    let pageData;\n    let postData;\n    let postId = link.split('/').pop();\n    this.state.facebookData.forEach((element) => {\n      if (this.state.currentPage === element.value) {\n        pageData = element;\n      }\n    });\n    window.FB.api(\n      `/${\n        pageData.value\n      }_${postId}/?fields=insights.metric(post_impressions,post_impressions_unique,post_activity),name,message,created_time`,\n      {\n        access_token: pageData.access_token\n      },\n      (response) => {\n        postData = {\n          link: link,\n          postId: postId,\n          pageId: pageData.value,\n          pageName: pageData.text,\n          name: response.name,\n          message: response.message,\n          created_time: new Date(response.created_time).toLocaleString('en-SG'),\n          impressions: response.insights.data[0].values[0].value,\n          reach: response.insights.data[1].values[0].value,\n          engagement: response.insights.data[2].values[0].value\n        };\n        let valueList = this.state.links;\n        valueList.push(postData);\n        this.setState({links: valueList});\n        this.saveToLocalStorage();\n        this.populateList();\n      }\n    );\n  };\n\n  handleInputChange = (e) => {\n    this.setState({currentValue: e.target.value.split('?')[0]});\n  };\n\n  handleDropdownChange = (e, {value}) => {\n    this.setState({\n      currentPage: value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Grid centered padded columns={1} divided>\n            <Grid.Row>\n              <Grid.Column>\n                <Header as=\"h1\" icon textAlign=\"center\">\n                  <Icon name=\"facebook\" />\n                  <Header.Content>Facebook Insights Tracker</Header.Content>\n                </Header>\n                <div\n                  className=\"fb-login-button\"\n                  style={{display: 'block', textAlign: 'center'}}\n                  data-size=\"large\"\n                  data-button-type=\"continue_with\"\n                  data-auto-logout-link=\"true\"\n                  data-use-continue-as=\"true\"\n                  data-scope=\"read_insights, manage_pages\"\n                />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form onSubmit={this.addToList}>\n                  <Input\n                    defaultValue={this.state.currentValue}\n                    onChange={this.handleInputChange}\n                    fluid\n                    required\n                    placeholder=\"Link\"\n                    type=\"url\"\n                  >\n                    <input />\n                    <Select\n                      placeholder=\"Page\"\n                      options={this.state.facebookData}\n                      onChange={this.handleDropdownChange}\n                    />\n                    <Button type=\"submit\">\n                      <Icon fitted name=\"add\" />\n                    </Button>\n                  </Input>\n                </Form>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Button\n                  content=\"Clear History\"\n                  onClick={this.clearLocalStorage}\n                />\n                <Button content=\"Force Refresh\" />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Card.Group centered itemsPerRow=\"3\">\n                  {this.populateList()}\n                </Card.Group>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}