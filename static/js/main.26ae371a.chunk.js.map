{"version":3,"sources":["components/PageSelect.js","App.js","serviceWorker.js","index.js"],"names":["PageSelect","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","options","pages","data","forEach","element","push","key","id","value","access_token","text","name","setState","react_default","a","createElement","Select","placeholder","Component","App","addToList","e","preventDefault","valueList","list","currentValue","saveToLocalStorage","handleInputChange","target","split","facebookData","loadFacebook","bind","assertThisInitialized","getFromLocalStorage","_this2","d","s","js","fjs","getElementsByTagName","getElementById","src","parentNode","insertBefore","document","window","fbAsyncInit","FB","init","appId","autoLogAppEvents","xfbml","version","loginFacebook","_this3","getLoginStatus","response","console","log","status","api","localStorage","hasOwnProperty","getItem","JSON","parse","setItem","stringify","items","index","length","List","Item","className","Container","Grid","centered","padded","columns","divided","Row","Column","Header","as","icon","textAlign","Icon","Content","style","display","data-size","data-button-type","data-auto-logout-link","data-use-continue-as","Form","onSubmit","Input","defaultValue","onChange","fluid","required","type","action","PageSelect_PageSelect","populateList","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26ae371a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Select} from 'semantic-ui-react';\n\nexport default class PageSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state({options: this.props.options});\n  }\n\n  componentDidUpdate() {\n    let pages = [];\n    this.state.options.data.forEach((element) => {\n      pages.push({\n        key: element.id,\n        value: element.access_token,\n        text: element.name\n      });\n    });\n    this.setState({options: pages});\n  }\n\n  render() {\n    return <Select placeholder=\"Page\" options={this.state.options} />;\n  }\n}\n","import React, {Component} from 'react';\nimport {\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Input,\n  List,\n  Form\n} from 'semantic-ui-react';\nimport PageSelect from './components/PageSelect';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {currentValue: '', list: [], facebookData: []};\n    this.loadFacebook = this.loadFacebook.bind(this);\n  }\n\n  componentDidMount() {\n    this.getFromLocalStorage();\n    this.loadFacebook();\n  }\n\n  loadFacebook() {\n    ((d, s, id) => {\n      var js,\n        fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {\n        return;\n      }\n      js = d.createElement(s);\n      js.id = id;\n      js.src = 'https://connect.facebook.net/en_US/sdk.js';\n      fjs.parentNode.insertBefore(js, fjs);\n    })(document, 'script', 'facebook-jssdk');\n\n    window.fbAsyncInit = () => {\n      window.FB.init({\n        appId: '123763181800839',\n        autoLogAppEvents: true,\n        xfbml: true,\n        version: 'v3.2',\n        state: true\n      });\n      this.loginFacebook();\n    };\n  }\n\n  loginFacebook() {\n    window.FB.getLoginStatus((response) => {\n      console.log(response);\n      if (response.status === 'connected') {\n        window.FB.api('/me/accounts?fields=name,access_token', (response) => {\n          console.log(response);\n          this.setState({facebookData: response});\n        });\n      } else {\n        console.log('Login Failed!');\n      }\n    });\n  }\n\n  getFromLocalStorage() {\n    if (localStorage.hasOwnProperty('list')) {\n      let valueList = localStorage.getItem('list');\n      this.setState({list: JSON.parse(valueList)});\n    }\n  }\n\n  saveToLocalStorage() {\n    localStorage.setItem('list', JSON.stringify(this.state.list));\n  }\n\n  populateList() {\n    let items = [];\n    let valueList = this.state.list;\n    for (let index = 0; index < valueList.length; index++) {\n      const element = valueList[index];\n      items.push(<List.Item key={index}>{element}</List.Item>);\n    }\n    return items;\n  }\n\n  addToList = (e) => {\n    e.preventDefault();\n    let valueList = this.state.list;\n    valueList.push(this.state.currentValue);\n    this.setState({list: valueList});\n    this.saveToLocalStorage();\n  };\n\n  handleInputChange = (e) => {\n    this.setState({currentValue: e.target.value.split('?')[0]});\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Grid centered padded columns={1} divided>\n            <Grid.Row>\n              <Grid.Column>\n                <Header as=\"h1\" icon textAlign=\"center\">\n                  <Icon name=\"facebook\" />\n                  <Header.Content>Facebook</Header.Content>\n                </Header>\n                <div\n                  className=\"fb-login-button\"\n                  style={{display: 'block', textAlign: 'center'}}\n                  data-size=\"large\"\n                  data-button-type=\"continue_with\"\n                  data-auto-logout-link=\"true\"\n                  data-use-continue-as=\"true\"\n                />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form onSubmit={this.addToList}>\n                  <Input\n                    defaultValue={this.state.currentValue}\n                    onChange={this.handleInputChange}\n                    fluid\n                    required\n                    placeholder=\"Link\"\n                    type=\"url\"\n                    action={{\n                      icon: 'add',\n                      type: 'submit'\n                    }}\n                  />\n                  <PageSelect options={this.state.facebookData} />\n                </Form>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <List>{this.populateList()}</List>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}